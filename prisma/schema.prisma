generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  email            String            @unique
  phone            String
  birth            DateTime
  activePlan       Boolean           @default(false)
  password         String
  varifiedEmail    Boolean           @default(false)
  fcmToken         String?           @default("")
  notification     Boolean           @default(false)
  isDeleted        Boolean           @default(false)
  expirationOtp    DateTime?
  otp              Int?
  role             UserRole          @default(USER)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  userInfo         UserInfo?
  bodyMeasurement  BodyMeasurement[]
  weightProgress   WeightProgress[]
  purchasedPlan    PurchasedPlan[]
  workoutPlans     WorkoutPlans[]
  mealPlans        MealPlans[]
  dailyGoal        DailyGoal[]
  post             Post[]
  postLike         PostLike[]
  postComment      PostComment[]
  sentRooms        Room[]            @relation("RoomSender")
  receivedRooms    Room[]            @relation("RoomReceiver")
  sentMessages     Chat[]            @relation("ChatSender")
  receivedMessages Chat[]            @relation("ChatReceiver")

  @@map("Users")
}

model UserInfo {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  fullName          String
  image             String?  @default("")
  age               Int
  gender            Gender
  weight            Float
  height            Float
  fitnessGoal       String
  dietaryPreference String
  isDeleted         Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  userId            String   @unique @db.ObjectId
  user              User     @relation(fields: [userId], references: [id])

  @@map("User-Info")
}

model FitnessGoal {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Fitness-Goal")
}

model BodyMeasurement {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  unit          Unit
  startingChest Int
  presentChest  Int
  startingWaist Int
  presentWaist  Int
  startingHips  Int
  presentHips   Int
  startingArms  Int
  presentArms   Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String   @db.ObjectId
  user          User     @relation(fields: [userId], references: [id])

  @@map("Body-Measurement")
}

model WeightProgress {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  weight    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])

  @@map("Weight-Progress")
}

model WorkoutPlans {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String   @db.ObjectId
  workoutId   String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  workout     Workout  @relation(fields: [workoutId], references: [id])

  @@map("Workout-Plans")
}

model MealPlans {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  isCompleted Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String    @db.ObjectId
  nutritionId String    @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])
  nutrition   Nutrition @relation(fields: [nutritionId], references: [id])

  @@map("Meal-Plans")
}

model Workout {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  icon         String         @default("")
  title        String
  thumbnail    String         @default("")
  video        String
  duration     String
  Kcal         Int
  fitnessGoal  String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  workoutPlans WorkoutPlans[]

  @@map("Workout")
}

model DailyGoal {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  CaloriesBurned   Int      @default(0)
  CaloriesConsumed Int      @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  userId           String   @db.ObjectId
  user             User     @relation(fields: [userId], references: [id])

  @@map("Daily-Goal")
}

model Nutrition {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  icon           String          @default("")
  title          String
  mealTime       MealTime
  NutritionTips  String
  fitnessGoal    String?         @default("")
  document       String?         @default("")
  video          String?         @default("")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  nutritionItems NutritionItem[]
  mealPlans      MealPlans[]

  @@map("Nutrition")
}

model NutritionItem {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  images      String
  quantity    String
  Kcal        Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  nutritionId String    @db.ObjectId
  nutrition   Nutrition @relation(fields: [nutritionId], references: [id])

  @@map("Nutrition-Item")
}

model Plan {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  duration      Int
  price         Float
  features      String[]
  isDeleted     Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  PurchasedPlan PurchasedPlan[]

  @@map("Subscriptions")
}

model PurchasedPlan {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  paymentId          String
  amount             Float
  activePlan Boolean  @default(true)
  startDate          DateTime @default(now())
  endDate            DateTime
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  userId             String   @db.ObjectId
  planId             String   @db.ObjectId
  user               User     @relation(fields: [userId], references: [id])
  Plan               Plan     @relation(fields: [planId], references: [id])

  @@map("Purchased-Subscription")
}

model Post {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  description String
  images      String[]      @default([])
  video       String?
  isDeleted   Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  userId      String        @db.ObjectId
  user        User          @relation(fields: [userId], references: [id])
  postLike    PostLike[]
  postComment PostComment[]

  @@map("Post")
}

model PostLike {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])

  @@map("Post-Like")
}

model PostComment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])

  @@map("Post-Comment")
}

model Notification {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  body      String
  type      MessageType
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@map("Notification")
}

model Room {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  senderId   String   @db.ObjectId
  receiverId String   @db.ObjectId
  roomType   RoomType @default(ALL)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  sender     User     @relation("RoomSender", fields: [senderId], references: [id])
  receiver   User     @relation("RoomReceiver", fields: [receiverId], references: [id])
  chat       Chat[]

  @@map("rooms")
}

model Chat {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  message    String
  images     String?  @default("")
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  senderId   String   @db.ObjectId
  receiverId String   @db.ObjectId
  roomId     String   @db.ObjectId
  sender     User     @relation("ChatSender", fields: [senderId], references: [id])
  receiver   User     @relation("ChatReceiver", fields: [receiverId], references: [id])
  room       Room     @relation(fields: [roomId], references: [id])

  @@map("chats")
}

model DiscountCode {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  code       Int
  discount   Float
  userType   MessageType
  expireDate DateTime    @updatedAt
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@map("Discount-Code")
}

enum UserRole {
  ADMIN
  USER
}

enum Gender {
  MALE
  FEMALE
}

enum Unit {
  CM
  IN
  KG
  LB
}

enum MealTime {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
}

enum MessageType {
  PAID
  UNPAID
  ALL
}

enum RoomType {
  ALL
  TRAINER
  NUTRITION
}
